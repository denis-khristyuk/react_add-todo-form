{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","cn","completed","title","id","TodoList","todos","map","username","userId","App","getUser","usersFromServer","find","todosWithUsers","todosFromServer","useState","setTitle","setUserId","setTodos","isCompleted","setIsCompleted","selectorError","setSelectorError","titleError","setTitleError","handleSubmit","event","preventDefault","trim","currentTitle","currentUserId","currentIsCompleted","createdTodo","Math","max","el","Number","person","createTodo","action","method","onSubmit","Input","placeholder","value","onChange","target","Select","MenuItem","disabled","type","onClick","Button","variant","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd9b3fc6.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user.email}`}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      className={cn(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': todo.completed,\n        },\n      )}\n      key={todo.id}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport Button from '@mui/material/Button';\nimport Input from '@mui/material/Input';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { FormEvent, useState } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types';\n\nexport const App = () => {\n  const getUser = (userId: number) => {\n    const foundedUser = usersFromServer.find(user => user.id === userId);\n\n    return foundedUser || null;\n  };\n\n  const todosWithUsers = todosFromServer.map((todo) => ({\n    ...todo,\n    user: getUser(todo.userId),\n  }));\n\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState('0');\n  const [todos, setTodos] = useState(todosWithUsers);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [selectorError, setSelectorError] = useState(false);\n  const [titleError, setTitleError] = useState(false);\n\n  const createTodo = (\n    currentTitle: string,\n    currentUserId: string,\n    currentIsCompleted: boolean,\n  ) => {\n    const createdTodo: Todo = {\n      id: Math.max(...todos.map(el => el.id)) + 1,\n      title: currentTitle,\n      completed: currentIsCompleted,\n      userId: Number(currentUserId),\n      user: usersFromServer.find(person => (\n        person.id === Number(currentUserId))) || null,\n    };\n\n    setTodos([\n      ...todos,\n      createdTodo,\n    ]);\n  };\n\n  const handleSelector = (value: string) => {\n    setUserId(value);\n    setSelectorError(false);\n  };\n\n  const handleTitle = (value: string) => {\n    setTitle(value);\n    if (title === '') {\n      setTitleError(false);\n    }\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (title.trim() === '') {\n      setTitleError(true);\n    }\n\n    if (userId === '0') {\n      setSelectorError(true);\n    }\n\n    if (title.trim() !== '' && userId !== '0') {\n      createTodo(title, userId, isCompleted);\n      setTitle('');\n      setUserId('0');\n      setIsCompleted(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <Input\n            placeholder=\"Please enter a title\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={event => handleTitle(event.target.value)}\n          />\n          {titleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <Select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={event => handleSelector(event.target.value)}\n          >\n            <MenuItem value=\"0\" disabled>Choose a user</MenuItem>\n\n            {usersFromServer.map((person) => (\n              <MenuItem value={person.id} key={person.id}>\n                {person.name}\n              </MenuItem>\n            ))}\n          </Select>\n          {selectorError && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            <input\n              type=\"checkbox\"\n              onClick={() => setIsCompleted(!isCompleted)}\n            />\n            Completed\n          </label>\n        </div>\n        <Button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          variant=\"outlined\"\n        >\n          Add\n        </Button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}